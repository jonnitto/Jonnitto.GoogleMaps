{"version":3,"file":"Main.js","sources":["../Private/Javascripts/GoogleMaps.js"],"sourcesContent":["// Google Maps Function\n// To set the options, use the global variable GoogleMapsOptions\n// To set the marker pin, use the global variable GoogleMapsPin\n// To include functions, use GoogleMapsFunction\nwindow.initJonnittoGoogleMaps = function () {\n    let feedback = [];\n    const initClass = 'jonnitto-googlemaps-init';\n\n    // We store eveything in one Object, so it's easier to include functions\n    let object = {\n        Map: {\n            elements: document.querySelectorAll('.jonnitto-googlemaps-mapview'),\n            options: {\n                zoom: 15,\n                mapTypeControl: true,\n                streetViewControl: false,\n                zoomControl: true,\n                scrollwheel: false,\n            },\n        },\n        Streetview: {\n            elements: document.querySelectorAll('.jonnitto-googlemaps-streetview'),\n            options: {\n                scrollwheel: false,\n            },\n        },\n    };\n\n    // Check if String is a Float\n    function isFloat(val) {\n        const floatRegex = /^-?\\d+(?:[.,]\\d*?)?$/;\n        if (!floatRegex.test(val)) {\n            return false;\n        }\n        val = parseFloat(val);\n        if (isNaN(val)) {\n            return false;\n        }\n        return true;\n    }\n\n    function extend(object, inject) {\n        for (let key in inject) {\n            if (inject.hasOwnProperty(key)) {\n                object[key] = inject[key];\n            }\n        }\n        return object;\n    }\n\n    function getNumber(element, value) {\n        const number = parseInt(element.getAttribute('data-' + value));\n        if (typeof number === 'number' && number) {\n            return number;\n        }\n        return false;\n    }\n\n    function hasData(element, value) {\n        return element.getAttribute('data-' + value) !== null;\n    }\n\n    function getLocation(element, callback) {\n        const address = element.getAttribute('data-location');\n        const split = address.split(',');\n        let coordinates;\n\n        function successful(location) {\n            element.classList.add(initClass);\n            callback({ element: element, location: location });\n        }\n\n        function failed(status) {\n            if (document.body.classList.contains('neos-backend')) {\n                // We are in the backend of Neos\n                const sentence = 'Geocode was not successful';\n                if (status) {\n                    alert(sentence + ' for the following reason: ' + status);\n                } else {\n                    alert(sentence);\n                }\n            }\n        }\n\n        if (split.length == 2 && isFloat(split[0].trim()) && isFloat(split[1].trim())) {\n            // Input are coordinates\n            coordinates = new google.maps.LatLng(split[0].trim(), split[1].trim());\n            successful(coordinates);\n        } else {\n            coordinates = new google.maps.Geocoder();\n            coordinates.geocode(\n                {\n                    address: address,\n                },\n                function (results, status) {\n                    if (status == google.maps.GeocoderStatus.OK) {\n                        successful(results[0].geometry.location);\n                    } else {\n                        failed(status);\n                    }\n                    return false;\n                }\n            );\n        }\n    }\n\n    function renderMap(options) {\n        let mapOptions = object.Map.options;\n        const zoom = getNumber(options.element, 'zoom');\n        let content = options.element.content || null;\n        if (content === null) {\n            content = options.element.innerHTML.replace(/^\\s+|\\s+$/g, '') || false;\n            options.element.content = content;\n        }\n        let storage = {\n            content: content,\n            LatLng: options.location,\n            lat: options.location.lat(),\n            lng: options.location.lng(),\n        };\n\n        if (zoom) {\n            mapOptions.zoom = zoom;\n        }\n        mapOptions.center = storage.LatLng;\n        storage.map = new google.maps.Map(options.element, mapOptions);\n\n        if (storage.content) {\n            storage.infowindow = new google.maps.InfoWindow({\n                content: storage.content,\n            });\n        }\n\n        // define marker\n        let marker = {\n            position: storage.LatLng,\n            title: options.element.getAttribute('data-marker-title'),\n            map: storage.map,\n            draggable: false,\n        };\n\n        if (typeof GoogleMapsPin === 'string') {\n            marker.icon = GoogleMapsPin;\n        } else if (typeof GoogleMapsPin === 'object') {\n            extend(marker, GoogleMapsPin);\n        }\n\n        storage.marker = new google.maps.Marker(marker);\n\n        if (hasData(options.element, 'showinfo') && storage.content) {\n            storage.infowindow.open(storage.map, storage.marker);\n        }\n\n        // jshint loopfunc:true\n        if (typeof window.addEventListener === 'function') {\n            (function (_storage) {\n                google.maps.event.addListener(_storage.map, 'bounds_changed', function () {\n                    _storage.center = _storage.map.getCenter();\n                });\n                google.maps.event.addDomListener(window, 'resize', function () {\n                    _storage.map.setCenter(_storage.center);\n                });\n                google.maps.event.addListener(_storage.marker, 'click', function () {\n                    if (_storage.content) {\n                        _storage.infowindow.open(_storage.map, _storage.marker);\n                    } else {\n                        window.open('https://www.google.com/maps/dir//' + _storage.lat + ',' + _storage.lng);\n                    }\n                });\n            })(storage);\n        }\n        // jshint loopfunc:false\n    }\n\n    function renderStreetview(options) {\n        let streetStorage = object.Streetview.options;\n        streetStorage.position = options.location;\n        streetStorage.pov = {\n            heading: getNumber(options.element, 'heading') || 0,\n            pitch: getNumber(options.element, 'pitch') || 0,\n        };\n        new google.maps.StreetViewPanorama(options.element, streetStorage);\n    }\n\n    for (let key in object) {\n        const num = object[key].elements.length;\n        object[key].index = num;\n        feedback[feedback.length] = num + ' ' + key + (num == 1 ? '' : 's') + ' found';\n    }\n\n    if (typeof GoogleMapsFunction === 'function') {\n        GoogleMapsFunction();\n    }\n\n    if (typeof GoogleMapsOptions === 'object') {\n        extend(object.Map.options, GoogleMapsOptions);\n    }\n\n    if (typeof GoogleStreetviewOptions === 'object') {\n        extend(object.Streetview.options, GoogleStreetviewOptions);\n    }\n\n    for (let m = 0; m < object.Map.index; m++) {\n        const map = object.Map.elements[m];\n\n        if (!map.classList.contains(initClass)) {\n            getLocation(map, renderMap);\n        }\n    }\n\n    for (let s = 0; s < object.Streetview.index; s++) {\n        const streetview = object.Streetview.elements[s];\n\n        if (!streetview.classList.contains(initClass)) {\n            getLocation(streetview, renderStreetview);\n        }\n    }\n\n    return feedback;\n};\n"],"names":["window","initJonnittoGoogleMaps","feedback","initClass","object","Map","elements","document","querySelectorAll","options","zoom","mapTypeControl","streetViewControl","zoomControl","scrollwheel","Streetview","isFloat","val","test","parseFloat","isNaN","extend","inject","key","hasOwnProperty","getNumber","element","value","number","parseInt","getAttribute","getLocation","callback","address","split","successful","location","classList","add","length","trim","google","maps","LatLng","Geocoder","geocode","results","status","GeocoderStatus","OK","geometry","body","contains","sentence","alert","failed","renderMap","mapOptions","content","innerHTML","replace","storage","lat","lng","center","map","infowindow","InfoWindow","_storage","marker","position","title","draggable","GoogleMapsPin","icon","Marker","open","addEventListener","event","addListener","getCenter","addDomListener","setCenter","renderStreetview","streetStorage","pov","heading","pitch","StreetViewPanorama","num","index","GoogleMapsFunction","GoogleMapsOptions","GoogleStreetviewOptions","m","s","streetview"],"mappings":"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"}